using System.Xml;
using RazorLight;
using Reporting.Models;

namespace Reporting.Utilities;

/// <summary>
/// Generates an HTML report from a test results XML file, generated by NUnit.
/// </summary>
public static class ReportGenerator
{
    private const string NamespaceUri = "http://microsoft.com/schemas/VisualStudio/TeamTest/2010";
    private const string TestRunXPath = "/ns:TestRun";
    private const string TestDefinitionsXPath = "/ns:TestRun/ns:TestDefinitions/ns:UnitTest";
    private const string ResultsXPath = "/ns:TestRun/ns:Results/ns:UnitTestResult";

    /// <summary>
    /// Generates an HTML report from a test results XML file, generated by NUnit. 
    /// HTML report is generated to the same directory as the XML file.
    /// </summary>
    /// <param name="xmlFilePath">The path to the test results XML file.</param>
    /// <param name="outputHtmlFileName">The name of the output HTML file.</param>
    /// <param name="templatePath">The path to the Razor template file.</param>
    public static async Task GenerateHtmlReport(string xmlFilePath, string outputHtmlFileName = "report.html")
    {
        CheckFileExists(xmlFilePath);

        XmlDocument xmlDoc = LoadXmlDocument(xmlFilePath);
        XmlNamespaceManager nsmgr = CreateNamespaceManager(xmlDoc);

        TestRunModel testRunModel = InitializeTestRun(xmlDoc, nsmgr, xmlFilePath);

        var outputDirectory = Path.GetDirectoryName(xmlFilePath);
        var outputHtmlFilePath = Path.Combine(outputDirectory, outputHtmlFileName);
        await GenerateHtmlContent(outputHtmlFilePath, "ReportView.cshtml", testRunModel);
    }

    private static void CheckFileExists(string xmlFilePath)
    {
        if (!File.Exists(xmlFilePath))
        {
            throw new FileNotFoundException("The specified XML file does not exist.", xmlFilePath);
        }
    }

    private static XmlDocument LoadXmlDocument(string xmlFilePath)
    {
        XmlDocument xmlDoc = new XmlDocument();
        xmlDoc.Load(xmlFilePath);
        return xmlDoc;
    }

    private static XmlNamespaceManager CreateNamespaceManager(XmlDocument xmlDoc)
    {
        XmlNamespaceManager nsmgr = new XmlNamespaceManager(xmlDoc.NameTable);
        nsmgr.AddNamespace("ns", NamespaceUri);
        return nsmgr;
    }

    private static TestRunModel InitializeTestRun(XmlDocument xmlDoc, XmlNamespaceManager nsmgr, string xmlFilePath)
    {
        TestRunModel testRunModel = new TestRunModel();

        // Get test run name
        XmlNode testRunNode = xmlDoc.SelectSingleNode(TestRunXPath, nsmgr);
        if (testRunNode != null)
        {
            testRunModel.TestRunName = testRunNode.Attributes["name"]?.InnerText;
        }

        // Initialize test fixtures and create mapping between test IDs and fixture names
        Dictionary<string, string> testIdToFixtureName = new Dictionary<string, string>();

        foreach (XmlNode unitTestNode in xmlDoc.SelectNodes(TestDefinitionsXPath, nsmgr))
        {
            string testId = unitTestNode.Attributes["id"]?.InnerText;
            string fixtureName = unitTestNode.SelectSingleNode("ns:TestMethod", nsmgr)?.Attributes["className"]?.InnerText;

            // Create test fixture if it does not exist
            if (!testRunModel.TestFixtures.Any(f => f.Name == fixtureName))
            {
                TestFixtureModel fixtureModel = new TestFixtureModel
                {
                    Name = fixtureName
                };
                testRunModel.TestFixtures.Add(fixtureModel);
            }

            // Map test ID to fixture name
            testIdToFixtureName.Add(testId, fixtureName);
        }

        // Initialize test cases
        foreach (XmlNode resultNode in xmlDoc.SelectNodes(ResultsXPath, nsmgr))
        {
            string testId = resultNode.Attributes["testId"]?.InnerText;
            string testName = resultNode.Attributes["testName"]?.InnerText;
            string outcome = resultNode.Attributes["outcome"]?.InnerText;
            string duration = resultNode.Attributes["duration"]?.InnerText;
            string message = resultNode.SelectSingleNode("ns:Output/ns:ErrorInfo/ns:Message", nsmgr)?.InnerText;

            TestCaseModel testCase = new TestCaseModel
            {
                Name = testName,
                Result = outcome,
                Duration = TimeSpan.Parse(duration),
                Message = message
            };

            string fixtureName = testIdToFixtureName[testId];
            TestFixtureModel fixtureModel = testRunModel.TestFixtures.First(f => f.Name == fixtureName);
            fixtureModel.TestCases.Add(testCase);
        }

        // Get associated files
        string resultsDirectory = Path.GetDirectoryName(xmlFilePath);
        foreach (TestFixtureModel fixtureModel in testRunModel.TestFixtures)
        {
            foreach (TestCaseModel testCase in fixtureModel.TestCases)
            {
                string testName = testCase.Name;

                RetrieveAssociatedFiles(testCase.Traces, resultsDirectory, "Traces", fixtureModel.Name, testName);
                RetrieveAssociatedFiles(testCase.Logs, resultsDirectory, "Logs", fixtureModel.Name, testName);
                RetrieveAssociatedFiles(testCase.Screenshots, resultsDirectory, "Screenshots", fixtureModel.Name, testName);
            }
        }

        return testRunModel;
    }

    private static void RetrieveAssociatedFiles(List<string> fileList, string resultsDirectory, string subDirectory, string fixtureName, string testName)
    {
        string directoryPath = Path.Combine(resultsDirectory, subDirectory, fixtureName);
        if (Directory.Exists(directoryPath))
        {
            string[] files = Directory.GetFiles(directoryPath);
            foreach (string file in files)
            {
                if (file.Contains(testName))
                {
                    string relativePath = Path.GetRelativePath(resultsDirectory, file);
                    fileList.Add(relativePath);
                }
            }
        }
    }

    private static async Task GenerateHtmlContent(string outputHtmlPath, string templatePath, TestRunModel testRunModel)
    {
        var viewsDirPath = Path.Combine(Directory.GetCurrentDirectory(), "Reporting/Views");

        var engine = new RazorLightEngineBuilder()
            .UseFileSystemProject(viewsDirPath)
            .UseMemoryCachingProvider()
            .Build();

        string htmlContent = await engine.CompileRenderAsync(templatePath, testRunModel);

        await File.WriteAllTextAsync(outputHtmlPath, htmlContent);
    }
}
